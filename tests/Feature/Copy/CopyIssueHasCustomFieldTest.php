<?php

namespace tests\Feature\Copy;

use tests\Feature\TestCase\TestCaseTemporaryProject;
use Takuya\BacklogApiClient\Backup\Copy\BacklogCopy;

class CopyIssueHasCustomFieldTest extends TestCaseTemporaryProject {
  protected $sample_issue_type_id;
  protected $sample_priority_id;
  protected object $sample_cf_list;
  protected object $sample_issue;
  protected object $sample_cf_string;
  
  public function test_format_copy_issue_data_has_custom_field_multiple_list () {
    $worker = new BacklogCopy( $this->api );
    $rf = new \ReflectionClass( $worker );
    $m = $rf->getMethod( 'remapCustomFieldKeys' );
    $m->setAccessible( true );
    $idMap = [$this->sample_cf_list->id => 999999, $this->sample_cf_string->id => 123456];
    $ret = $m->invokeArgs( $worker, [$this->sample_issue, $idMap] );
    $this->assertArrayHasKey( 'customField_999999', $ret );
    $this->assertArrayHasKey( 'customField_123456', $ret );
    $this->assertEquals( [1, 2], $ret['customField_999999'] );
    $this->assertEquals( "入力サンプル-AAAA", $ret['customField_123456'] );
  }
  
  protected function setUp (): void {
    parent::setUp(); // TODO: Change the autogenerated stub
    $this->api->enableLogging();
    $this->create_custom_field_multiple_list();
    $this->create_custom_field_string();
    $this->issue_type_id();
    $this->priority_id();
    $this->create_issue_with_custom_field();
  }
  
  protected function create_custom_field_string () {
    $api = $this->api_client();
    $ret = $api->addCustomField( $this->project_id, [
      'typeId'      => 1,
      'name'        => 'sample-for-api-string',
      'description' => 'APIテスト用（文字列）',
      'required'    => false,
    ] );
    $this->sample_cf_string = $ret;
    return $ret;
  }
  
  protected function create_custom_field_multiple_list () {
    $api = $this->api_client();
    $ret = $api->addCustomField( $this->project_id, [
      'typeId'       => 6,
      'name'         => 'sample-for-api-multi',
      'description'  => 'APIテスト用（複数選択)',
      'required'     => false,
      'items'        => ['項目A', '項目B', '項目C'],
      'allowInput'   => true,
      'allowAddItem' => true,
    ] );
    $this->sample_cf_list = $ret;
    return $ret;
  }
  
  protected function issue_type_id () {
    $api = $this->api_client();
    $ret = $api->getIssueTypeList( $this->project_id );
    $this->sample_issue_type_id = $ret[0]->id;
  }
  
  protected function priority_id () {
    $api = $this->api_client();
    $ret = $api->getPriorityList();
    $this->sample_priority_id = $ret[0]->id;
  }
  
  public function create_issue_with_custom_field () {
    $api = $this->api_client();
    $data = [
      'projectId'   => $this->project_id,
      'summary'     => '追加テスト',
      'issueTypeId' => $this->sample_issue_type_id,
      'priorityId'  => $this->sample_priority_id,
    ];
    $data['customField_'.$this->sample_cf_list->id] = [1, 2];
    $data['customField_'.$this->sample_cf_string->id] = '入力サンプル-AAAA';
    
    $this->sample_issue = $api->addIssue( $data );
  }
  
  protected function tearDown (): void {
    $this->api->disableLogging();
    parent::tearDown(); // TODO: Change the autogenerated stub
  }
  
}